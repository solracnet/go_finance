// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0

package db

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createAccountStmt, err = db.PrepareContext(ctx, createAccount); err != nil {
		return nil, fmt.Errorf("error preparing query CreateAccount: %w", err)
	}
	if q.createCategoryStmt, err = db.PrepareContext(ctx, createCategory); err != nil {
		return nil, fmt.Errorf("error preparing query CreateCategory: %w", err)
	}
	if q.createUserStmt, err = db.PrepareContext(ctx, createUser); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUser: %w", err)
	}
	if q.deleteAccountStmt, err = db.PrepareContext(ctx, deleteAccount); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteAccount: %w", err)
	}
	if q.deleteCategoryStmt, err = db.PrepareContext(ctx, deleteCategory); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteCategory: %w", err)
	}
	if q.getAccountByIdStmt, err = db.PrepareContext(ctx, getAccountById); err != nil {
		return nil, fmt.Errorf("error preparing query GetAccountById: %w", err)
	}
	if q.getAccountsStmt, err = db.PrepareContext(ctx, getAccounts); err != nil {
		return nil, fmt.Errorf("error preparing query GetAccounts: %w", err)
	}
	if q.getAccountsByUserIdAndTypeStmt, err = db.PrepareContext(ctx, getAccountsByUserIdAndType); err != nil {
		return nil, fmt.Errorf("error preparing query GetAccountsByUserIdAndType: %w", err)
	}
	if q.getAccountsByUserIdAndTypeAndCategoryIdStmt, err = db.PrepareContext(ctx, getAccountsByUserIdAndTypeAndCategoryId); err != nil {
		return nil, fmt.Errorf("error preparing query GetAccountsByUserIdAndTypeAndCategoryId: %w", err)
	}
	if q.getAccountsByUserIdAndTypeAndCategoryIdAndDescriptionStmt, err = db.PrepareContext(ctx, getAccountsByUserIdAndTypeAndCategoryIdAndDescription); err != nil {
		return nil, fmt.Errorf("error preparing query GetAccountsByUserIdAndTypeAndCategoryIdAndDescription: %w", err)
	}
	if q.getAccountsByUserIdAndTypeAndCategoryIdAndTitleStmt, err = db.PrepareContext(ctx, getAccountsByUserIdAndTypeAndCategoryIdAndTitle); err != nil {
		return nil, fmt.Errorf("error preparing query GetAccountsByUserIdAndTypeAndCategoryIdAndTitle: %w", err)
	}
	if q.getAccountsByUserIdAndTypeAndCategoryIdAndTitleAndDescriptionStmt, err = db.PrepareContext(ctx, getAccountsByUserIdAndTypeAndCategoryIdAndTitleAndDescription); err != nil {
		return nil, fmt.Errorf("error preparing query GetAccountsByUserIdAndTypeAndCategoryIdAndTitleAndDescription: %w", err)
	}
	if q.getAccountsGraphStmt, err = db.PrepareContext(ctx, getAccountsGraph); err != nil {
		return nil, fmt.Errorf("error preparing query GetAccountsGraph: %w", err)
	}
	if q.getAccountsReportsStmt, err = db.PrepareContext(ctx, getAccountsReports); err != nil {
		return nil, fmt.Errorf("error preparing query GetAccountsReports: %w", err)
	}
	if q.getCategoriesStmt, err = db.PrepareContext(ctx, getCategories); err != nil {
		return nil, fmt.Errorf("error preparing query GetCategories: %w", err)
	}
	if q.getCategoriesByUserIdAndTypeStmt, err = db.PrepareContext(ctx, getCategoriesByUserIdAndType); err != nil {
		return nil, fmt.Errorf("error preparing query GetCategoriesByUserIdAndType: %w", err)
	}
	if q.getCategoriesByUserIdAndTypeAndDescriptionStmt, err = db.PrepareContext(ctx, getCategoriesByUserIdAndTypeAndDescription); err != nil {
		return nil, fmt.Errorf("error preparing query GetCategoriesByUserIdAndTypeAndDescription: %w", err)
	}
	if q.getCategoriesByUserIdAndTypeAndTitleStmt, err = db.PrepareContext(ctx, getCategoriesByUserIdAndTypeAndTitle); err != nil {
		return nil, fmt.Errorf("error preparing query GetCategoriesByUserIdAndTypeAndTitle: %w", err)
	}
	if q.getCategoryByIdStmt, err = db.PrepareContext(ctx, getCategoryById); err != nil {
		return nil, fmt.Errorf("error preparing query GetCategoryById: %w", err)
	}
	if q.getUserStmt, err = db.PrepareContext(ctx, getUser); err != nil {
		return nil, fmt.Errorf("error preparing query GetUser: %w", err)
	}
	if q.getUserByIdStmt, err = db.PrepareContext(ctx, getUserById); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserById: %w", err)
	}
	if q.updateAccountStmt, err = db.PrepareContext(ctx, updateAccount); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateAccount: %w", err)
	}
	if q.updateCategoryStmt, err = db.PrepareContext(ctx, updateCategory); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateCategory: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createAccountStmt != nil {
		if cerr := q.createAccountStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createAccountStmt: %w", cerr)
		}
	}
	if q.createCategoryStmt != nil {
		if cerr := q.createCategoryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createCategoryStmt: %w", cerr)
		}
	}
	if q.createUserStmt != nil {
		if cerr := q.createUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserStmt: %w", cerr)
		}
	}
	if q.deleteAccountStmt != nil {
		if cerr := q.deleteAccountStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteAccountStmt: %w", cerr)
		}
	}
	if q.deleteCategoryStmt != nil {
		if cerr := q.deleteCategoryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteCategoryStmt: %w", cerr)
		}
	}
	if q.getAccountByIdStmt != nil {
		if cerr := q.getAccountByIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAccountByIdStmt: %w", cerr)
		}
	}
	if q.getAccountsStmt != nil {
		if cerr := q.getAccountsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAccountsStmt: %w", cerr)
		}
	}
	if q.getAccountsByUserIdAndTypeStmt != nil {
		if cerr := q.getAccountsByUserIdAndTypeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAccountsByUserIdAndTypeStmt: %w", cerr)
		}
	}
	if q.getAccountsByUserIdAndTypeAndCategoryIdStmt != nil {
		if cerr := q.getAccountsByUserIdAndTypeAndCategoryIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAccountsByUserIdAndTypeAndCategoryIdStmt: %w", cerr)
		}
	}
	if q.getAccountsByUserIdAndTypeAndCategoryIdAndDescriptionStmt != nil {
		if cerr := q.getAccountsByUserIdAndTypeAndCategoryIdAndDescriptionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAccountsByUserIdAndTypeAndCategoryIdAndDescriptionStmt: %w", cerr)
		}
	}
	if q.getAccountsByUserIdAndTypeAndCategoryIdAndTitleStmt != nil {
		if cerr := q.getAccountsByUserIdAndTypeAndCategoryIdAndTitleStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAccountsByUserIdAndTypeAndCategoryIdAndTitleStmt: %w", cerr)
		}
	}
	if q.getAccountsByUserIdAndTypeAndCategoryIdAndTitleAndDescriptionStmt != nil {
		if cerr := q.getAccountsByUserIdAndTypeAndCategoryIdAndTitleAndDescriptionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAccountsByUserIdAndTypeAndCategoryIdAndTitleAndDescriptionStmt: %w", cerr)
		}
	}
	if q.getAccountsGraphStmt != nil {
		if cerr := q.getAccountsGraphStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAccountsGraphStmt: %w", cerr)
		}
	}
	if q.getAccountsReportsStmt != nil {
		if cerr := q.getAccountsReportsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAccountsReportsStmt: %w", cerr)
		}
	}
	if q.getCategoriesStmt != nil {
		if cerr := q.getCategoriesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getCategoriesStmt: %w", cerr)
		}
	}
	if q.getCategoriesByUserIdAndTypeStmt != nil {
		if cerr := q.getCategoriesByUserIdAndTypeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getCategoriesByUserIdAndTypeStmt: %w", cerr)
		}
	}
	if q.getCategoriesByUserIdAndTypeAndDescriptionStmt != nil {
		if cerr := q.getCategoriesByUserIdAndTypeAndDescriptionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getCategoriesByUserIdAndTypeAndDescriptionStmt: %w", cerr)
		}
	}
	if q.getCategoriesByUserIdAndTypeAndTitleStmt != nil {
		if cerr := q.getCategoriesByUserIdAndTypeAndTitleStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getCategoriesByUserIdAndTypeAndTitleStmt: %w", cerr)
		}
	}
	if q.getCategoryByIdStmt != nil {
		if cerr := q.getCategoryByIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getCategoryByIdStmt: %w", cerr)
		}
	}
	if q.getUserStmt != nil {
		if cerr := q.getUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserStmt: %w", cerr)
		}
	}
	if q.getUserByIdStmt != nil {
		if cerr := q.getUserByIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByIdStmt: %w", cerr)
		}
	}
	if q.updateAccountStmt != nil {
		if cerr := q.updateAccountStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateAccountStmt: %w", cerr)
		}
	}
	if q.updateCategoryStmt != nil {
		if cerr := q.updateCategoryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateCategoryStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                                                                DBTX
	tx                                                                *sql.Tx
	createAccountStmt                                                 *sql.Stmt
	createCategoryStmt                                                *sql.Stmt
	createUserStmt                                                    *sql.Stmt
	deleteAccountStmt                                                 *sql.Stmt
	deleteCategoryStmt                                                *sql.Stmt
	getAccountByIdStmt                                                *sql.Stmt
	getAccountsStmt                                                   *sql.Stmt
	getAccountsByUserIdAndTypeStmt                                    *sql.Stmt
	getAccountsByUserIdAndTypeAndCategoryIdStmt                       *sql.Stmt
	getAccountsByUserIdAndTypeAndCategoryIdAndDescriptionStmt         *sql.Stmt
	getAccountsByUserIdAndTypeAndCategoryIdAndTitleStmt               *sql.Stmt
	getAccountsByUserIdAndTypeAndCategoryIdAndTitleAndDescriptionStmt *sql.Stmt
	getAccountsGraphStmt                                              *sql.Stmt
	getAccountsReportsStmt                                            *sql.Stmt
	getCategoriesStmt                                                 *sql.Stmt
	getCategoriesByUserIdAndTypeStmt                                  *sql.Stmt
	getCategoriesByUserIdAndTypeAndDescriptionStmt                    *sql.Stmt
	getCategoriesByUserIdAndTypeAndTitleStmt                          *sql.Stmt
	getCategoryByIdStmt                                               *sql.Stmt
	getUserStmt                                                       *sql.Stmt
	getUserByIdStmt                                                   *sql.Stmt
	updateAccountStmt                                                 *sql.Stmt
	updateCategoryStmt                                                *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                             tx,
		tx:                             tx,
		createAccountStmt:              q.createAccountStmt,
		createCategoryStmt:             q.createCategoryStmt,
		createUserStmt:                 q.createUserStmt,
		deleteAccountStmt:              q.deleteAccountStmt,
		deleteCategoryStmt:             q.deleteCategoryStmt,
		getAccountByIdStmt:             q.getAccountByIdStmt,
		getAccountsStmt:                q.getAccountsStmt,
		getAccountsByUserIdAndTypeStmt: q.getAccountsByUserIdAndTypeStmt,
		getAccountsByUserIdAndTypeAndCategoryIdStmt:                       q.getAccountsByUserIdAndTypeAndCategoryIdStmt,
		getAccountsByUserIdAndTypeAndCategoryIdAndDescriptionStmt:         q.getAccountsByUserIdAndTypeAndCategoryIdAndDescriptionStmt,
		getAccountsByUserIdAndTypeAndCategoryIdAndTitleStmt:               q.getAccountsByUserIdAndTypeAndCategoryIdAndTitleStmt,
		getAccountsByUserIdAndTypeAndCategoryIdAndTitleAndDescriptionStmt: q.getAccountsByUserIdAndTypeAndCategoryIdAndTitleAndDescriptionStmt,
		getAccountsGraphStmt:                           q.getAccountsGraphStmt,
		getAccountsReportsStmt:                         q.getAccountsReportsStmt,
		getCategoriesStmt:                              q.getCategoriesStmt,
		getCategoriesByUserIdAndTypeStmt:               q.getCategoriesByUserIdAndTypeStmt,
		getCategoriesByUserIdAndTypeAndDescriptionStmt: q.getCategoriesByUserIdAndTypeAndDescriptionStmt,
		getCategoriesByUserIdAndTypeAndTitleStmt:       q.getCategoriesByUserIdAndTypeAndTitleStmt,
		getCategoryByIdStmt:                            q.getCategoryByIdStmt,
		getUserStmt:                                    q.getUserStmt,
		getUserByIdStmt:                                q.getUserByIdStmt,
		updateAccountStmt:                              q.updateAccountStmt,
		updateCategoryStmt:                             q.updateCategoryStmt,
	}
}
